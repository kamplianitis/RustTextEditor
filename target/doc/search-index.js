var searchIndex = JSON.parse('{\
"rust_vim_new":{"doc":"","t":"FANNELLLLLLLLLLLLLLLMMM","n":["main","rope","Leaf","Node","Rope","borrow","borrow_mut","collect_substring","concatenate_ropes","fmt","from","get_a_substring","into","new_leaf","new_node","node_length","split_rope","try_from","try_into","type_id","left","right","weight"],"q":[[0,"rust_vim_new"],[2,"rust_vim_new::rope"],[20,"rust_vim_new::rope::Rope"],[23,"alloc::string"],[24,"core::fmt"],[25,"core::fmt"],[26,"core::any"]],"d":["","","The sting in case the rope is a Leaf.","","Enumeration of possible values in a Rope Data Structure. …","","","","Concatenation of two ropes. In case of a Node …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creation of a new Leaf node in the  binary tree.","Creation of a new internal Node in the  binary tree.","Calculates the length of the strings containing in a Node. …","","","","","The left Leaf/Node of the Node.","The right Leaf/Node of the Node.","the size of the left part of the Node."],"i":[0,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,10,10],"f":[[[],1],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[2,3,3,4],1],[[2,2],2],[[2,5],6],[-1,-1,[]],[[2,3,3],4],[-1,-2,[],[]],[7,2],[[2,2],2],[2,3],[[2,3],[[1,[2,2]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0],"c":[],"p":[[15,"tuple"],[4,"Rope",2],[15,"usize"],[3,"String",23],[3,"Formatter",24],[6,"Result",24],[15,"str"],[4,"Result",25],[3,"TypeId",26],[13,"Node",20]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
